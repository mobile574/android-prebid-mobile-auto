package OMSDK;

import bmp.BMPWrapper;
import global.Global_for_JSON;
import net.minidev.json.JSONArray;
import net.minidev.json.JSONObject;

import java.awt.geom.Rectangle2D;

import static org.testng.Assert.fail;

/**
 * Implements methods for parsing OM events generated by omsdk script in server ads.
 */
public class OMSDKEventParserOMIDURL implements OMSDKEventParser {

    // ----------------------------------------------------------------------
    // Private constants
    // ----------------------------------------------------------------------

    private static class JSON_PATH {
        public static final String KEY_NAME = "name";
        public static final String KEY_VALUE = "value";
        public static final String EVENT = "$.request.queryString";

        public static final String OMID = "supported";

        public static final String VERIFICATION_PARAMETERS = "data[verificationParameters]";

        public static final String SESSION_ID = "adSessionId";

        public static final String EVENT_TYPE = "type";
        public static final String VIEWABILITY = "data[adView][percentageInView]";
        public static final String VIEWABILITY_REASONS = "data[adView][reasons][0]";
        public static final String SERVICE_VERSION = "data[context][omidJsInfo][serviceVersion]";
        public static final String PARTNER_VERSION = "data[context][omidNativeInfo][partnerVersion]";
        public static final String DATA_ENVIRONMENT = "data[context][environment]";
        public static final String AD_SESSION_TYPE = "data[context][adSessionType]";
        public static final String SUPPORTS_CLID = "data[context][supports][0]";
        public static final String SUPPORTS_VLID = "data[context][supports][1]";
        public static final String APP_ID = "data[context][app][appId]";
        public static final String LIBRARY_VERSION = "data[context][app][libraryVersion]";
        public static final String MEDIA_TYPE = "data[mediaType]";
        public static final String INTERACTION_TYPE = "data[interactionType]";
        public static final String DEVICE_VOLUME = "data[deviceVolume]";
        public static final String PLAYER_VOLUME = "data[videoPlayerVolume]";
        public static final String PLAYER_STATE = "data[state]";

        public static final String SKIPPABLE = "data[skippable]";
        public static final String AUTO_PLAY = "data[autoPlay]";
        public static final String POSITION = "data[position]";

        public static final String VIEWPORT_WIDTH = "data[viewport][width]";
        public static final String VIEWPORT_HEIGHT = "data[viewport][height]";
        public static final String VIEWPORT_X = "data[viewport][x]";
        public static final String VIEWPORT_Y = "data[viewport][y]";

        public static final String ON_SCREEN_GEOMETRY_WIDTH = "data[adView][onScreenGeometry][width]";
        public static final String ON_SCREEN_GEOMETRY_HEIGHT = "data[adView][onScreenGeometry][height]";
        public static final String ON_SCREEN_GEOMETRY_X = "data[adView][onScreenGeometry][x]";
        public static final String ON_SCREEN_GEOMETRY_Y = "data[adView][onScreenGeometry][y]";

        public static final String OBSTRUCTION_GEOMETRY_WIDTH = "data[adView][onScreenGeometry][obstructions][0][width]";
        public static final String OBSTRUCTION_GEOMETRY_HEIGHT = "data[adView][onScreenGeometry][obstructions][0][height]";
        public static final String OBSTRUCTION_GEOMETRY_X = "data[adView][onScreenGeometry][obstructions][0][x]";
        public static final String OBSTRUCTION_GEOMETRY_Y = "data[adView][onScreenGeometry][obstructions][0][y]";
    }

    // ----------------------------------------------------------------------
    // Implementation of lfOMSDKEventParser
    // ----------------------------------------------------------------------

    public String requestPrefixForHar() {
        return BMPWrapper.EVENT.OMSDK_SESSION_OMID_VV;
    }

    public String extractEventFromHarRecord(String rawHarRecord) {
        String rawOMEvent = "";

        try {
            rawOMEvent = Global_for_JSON.getJsonValue(rawHarRecord, JSON_PATH.EVENT);
        } catch (Throwable exc) {
            fail(String.format("OMSDKEventParser error: can't extract value for path '%s' from event '%s'", JSON_PATH.EVENT, rawHarRecord));
        }

        return rawOMEvent;
    }

    public boolean isOmidSupportedEvent(String event) {
        return !safeGetJsonValue(event, JSON_PATH.OMID).isEmpty();
    }

    public boolean isOmidSupported(String event){
        return safeGetJsonValue(event, JSON_PATH.OMID).equals("yes");
    }

    public boolean isSkippable(String event) {
        return Boolean.valueOf(safeGetJsonValue(event, JSON_PATH.SKIPPABLE));
    }

    public boolean isAutoPlay(String event) {
        return Boolean.valueOf(safeGetJsonValue(event, JSON_PATH.AUTO_PLAY));
    }

    public String getPosition(String event) {
        return safeGetJsonValue(event, JSON_PATH.POSITION);
    }

    public String getSessionID(String event) {
        return safeGetJsonValue(event, JSON_PATH.SESSION_ID);
    }

    public String getEventType(String event) {
        return safeGetJsonValue(event, JSON_PATH.EVENT_TYPE);
    }

    public int getPercentageInView(String event){
        return Integer.parseInt(safeGetJsonValue(event, JSON_PATH.VIEWABILITY));
    }

    public String getServiceVersion(String event) {
        return safeGetJsonValue(event, OMSDKEventParserOMIDURL.JSON_PATH.SERVICE_VERSION);
    }

    public String getPartnerVersion(String event) {
        return safeGetJsonValue(event, OMSDKEventParserOMIDURL.JSON_PATH.PARTNER_VERSION);
    }

    public String getEnvironment(String event) {
        return safeGetJsonValue(event, OMSDKEventParserOMIDURL.JSON_PATH.DATA_ENVIRONMENT);
    }

    public String getAdSessionType(String event) {
        return safeGetJsonValue(event, OMSDKEventParserOMIDURL.JSON_PATH.AD_SESSION_TYPE);
    }

    public String getClid(String event) {
        return safeGetJsonValue(event, OMSDKEventParserOMIDURL.JSON_PATH.SUPPORTS_CLID);
    }

    public String getVlid(String event) {
        return safeGetJsonValue(event, OMSDKEventParserOMIDURL.JSON_PATH.SUPPORTS_VLID);
    }

    public String getAppId(String event) {
        return safeGetJsonValue(event, OMSDKEventParserOMIDURL.JSON_PATH.APP_ID);
    }

    public String getLibraryVersion(String event) {
        return safeGetJsonValue(event, OMSDKEventParserOMIDURL.JSON_PATH.LIBRARY_VERSION);
    }


    public String getVerificationParameter(String event) {
        return safeGetJsonValue(event, JSON_PATH.VERIFICATION_PARAMETERS);
    }

    public boolean eventContainsReasons(String event, String[] reasons) {
        String eventReasons = getViewabilityErrorReasons(event);
        for (String reason : reasons) {
            if (eventReasons.equals(reason)) {
                return true;
            }
        }
        return false;
    }

    public String getViewabilityErrorReasons(String event) {
        return safeGetJsonValue(event, OMSDKEventParserOMIDURL.JSON_PATH.VIEWABILITY_REASONS);
    }

    public String getUserInteraction(String event) {
        return safeGetJsonValue(event, OMSDKEventParserOMIDURL.JSON_PATH.INTERACTION_TYPE);
    }

    public Rectangle2D getOnScreenGeometry(String event) {

        String widthStr = safeGetJsonValue(event, JSON_PATH.ON_SCREEN_GEOMETRY_WIDTH);
        String heightStr = safeGetJsonValue(event, JSON_PATH.ON_SCREEN_GEOMETRY_HEIGHT);
        String xStr = safeGetJsonValue(event, JSON_PATH.ON_SCREEN_GEOMETRY_X);
        String yStr = safeGetJsonValue(event, JSON_PATH.ON_SCREEN_GEOMETRY_Y);

        return getGeometry(widthStr, heightStr, xStr, yStr);
    }

    public Rectangle2D getObstructionGeometry(String event) {

        String widthStr = safeGetJsonValue(event, JSON_PATH.OBSTRUCTION_GEOMETRY_WIDTH);
        String heightStr = safeGetJsonValue(event, JSON_PATH.OBSTRUCTION_GEOMETRY_HEIGHT);
        String xStr = safeGetJsonValue(event, JSON_PATH.OBSTRUCTION_GEOMETRY_X);
        String yStr = safeGetJsonValue(event, JSON_PATH.OBSTRUCTION_GEOMETRY_Y);

        return getGeometry(widthStr, heightStr, xStr, yStr);
    }

    public String getMediaType(String event) {
        return safeGetJsonValue(event, OMSDKEventParserOMIDURL.JSON_PATH.MEDIA_TYPE);
    }

    public String getViewportData(String event){
        String viewportWidth = safeGetJsonValue(event, JSON_PATH.VIEWPORT_WIDTH);
        String viewportHeight = safeGetJsonValue(event, JSON_PATH.VIEWPORT_HEIGHT);
        String viewportX = safeGetJsonValue(event, JSON_PATH.VIEWPORT_X);
        String viewportY = safeGetJsonValue(event, JSON_PATH.VIEWPORT_Y);
        if (viewportWidth.isEmpty() || viewportHeight.isEmpty() || viewportX.isEmpty() || viewportY.isEmpty()) {
            return null;
        }
        return String.format(viewportHeight, viewportWidth, viewportX, viewportY);
    }

    public String getPlayerState(String event){
        return safeGetJsonValue(event, JSON_PATH.PLAYER_STATE);
    }

    // ----------------------------------------------------------------------
    // Private methods
    // ----------------------------------------------------------------------

    /**
     * Extracts value for given path from the event
     * @param event - the raw string for OM event received from Har
     * @param path  - the JSON path to the property
     * @return  the value for given path
     *          the empty string if event does not contain the given path
     */
    private String safeGetJsonValue(String event, String path) {
        String res = "";
        try {
            JSONArray array = Global_for_JSON.cropJson2Array(event, "$");
            for (int i = 0; i < array.size(); i++) {
                JSONObject object = (JSONObject) array.get(i);
                String name = object.get(JSON_PATH.KEY_NAME).toString();
                if (name.equals(path)) {
                    res = object.get(JSON_PATH.KEY_VALUE).toString();
                    break;
                }
            }
        } catch (Throwable exc) {
            fail(String.format("OMSDKEventParser error: can't extract value for path '%s' from event '%s'", path, event));
        }

        return res;
    }

    public String getDeviceVolume(String event) {
        return safeGetJsonValue(event, JSON_PATH.DEVICE_VOLUME);
    }

    public String getVideoPlayerVolume(String event) {
        return safeGetJsonValue(event, JSON_PATH.PLAYER_VOLUME);
    }

    private Rectangle2D getGeometry(
            String widthStr,
            String heightStr,
            String xStr,
            String yStr) {
        if (widthStr.isEmpty() || heightStr.isEmpty() || xStr.isEmpty() || yStr.isEmpty()) {
            return null;
        }

        double width = Double.parseDouble(widthStr);
        double height = Double.parseDouble(heightStr);
        double x = Double.parseDouble(xStr);
        double y = Double.parseDouble(yStr);

        return new Rectangle2D.Double(x, y, width, height);
    }

}
