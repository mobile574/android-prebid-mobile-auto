package OMSDK;

import bmp.BMPWrapper;
import global.Global_for_JSON;

import java.awt.geom.Rectangle2D;

import static org.testng.Assert.fail;


/**
 * Implements methods for parsing OM events generated by VV provided with OMSDK framework.
 */
public class OMSDKEventParserJSON implements OMSDKEventParser {

    // ----------------------------------------------------------------------
    // Private constants
    // ----------------------------------------------------------------------

    private static class JSON_PATH {
        public static final String OMID = "\"OmidSupported";
        public static final String OMID_SUPPORTED = "\"OmidSupported[true]\"";
        public static final String EVENT = "$.request.queryString[0].value";
        public static final String SESSION_ID = "$.adSessionId";
        public static final String EVENT_TYPE = "$.type";
        public static final String VIEWABILITY = "$.data.adView.percentageInView";
        public static final String VIEWABILITY_REASONS = "$.data.adView.reasons[0]";
        public static final String ON_SCREEN_GEOMETRY = "$.data.adView.onScreenGeometry";
        public static final String OBSTRUCTION_GEOMETRY = "$.data.adView.onScreenGeometry.obstructions[0]";
        public static final String SERVICE_VERSION = "$.data.context.omidJsInfo.serviceVersion";
        public static final String PARTNER_VERSION = "$.data.context.omidNativeInfo.partnerVersion";
        public static final String DATA_ENVIRONMENT = "$.data.context.environment";
        public static final String AD_SESSION_TYPE = "$.data.context.adSessionType";
        public static final String SUPPORTS_CLID = "$.data.context.supports.0";
        public static final String SUPPORTS_VLID = "$.data.context.supports.1";
        public static final String APP_ID = "$.data.context.app.appId";
        public static final String LIBRARY_VERSION = "$.data.context.app.libraryVersion";
        public static final String MEDIA_TYPE = "$.data.mediaType";
        public static final String INTERACTION_TYPE = "$.data.interactionType";
        public static final String DEVICE_VOLUME = "$.data.deviceVolume";
        public static final String PLAYER_VOLUME = "$.data.videoPlayerVolume";
        public static final String PLAYER_STATE = "$.data.state";
        public static final String VERIFICATION_PARAMETERS = "$data.verificationParameters";

        public static final String SKIPPABLE = "data.skippable";
        public static final String AUTOPLAY = "data.autoPlay";
        public static final String POSITION = "data.position";

        public static final String VIEWPORT_WIDTH = "$.data.viewport.width";
        public static final String VIEWPORT_HEIGHT = "$.data.viewport.height";
        public static final String VIEWPORT_X = "$.data.viewport.x";
        public static final String VIEWPORT_Y = "$.data.viewport.y";

        public static final String WIDTH = "$.width";
        public static final String HEIGHT = "$.height";
        public static final String X = "$.x";
        public static final String Y = "$.y";

    }

    // ----------------------------------------------------------------------
    // Implementation of lfOMSDKEventParser
    // ----------------------------------------------------------------------

    public String getVerificationParameter(String event) {
        return safeGetJsonValue(event, JSON_PATH.VERIFICATION_PARAMETERS);
    }

    public String requestPrefixForHar() {
        return BMPWrapper.EVENT.OMSDK_SESSION_JSON_VV;
    }

    public String extractEventFromHarRecord(String rawHarRecord) {

        String rawOMEvent = safeGetJsonValue(rawHarRecord, JSON_PATH.EVENT);

        // The expected format: _TIMESTAMP_::_REQUEST_
        // We want to return the _REQUEST_

        String[] parts = rawOMEvent.split("::");
        if (parts.length != 2) {
            fail(String.format("Unsupported message format: %s", rawOMEvent));
            return "";
        }

        return parts[1];
    }

    public boolean isOmidSupportedEvent(String event) {
        return event.startsWith(JSON_PATH.OMID);
    }

    public boolean isOmidSupported(String event){
        return event.equals(JSON_PATH.OMID_SUPPORTED);
    }

    public boolean isSkippable(String event) {
        return Boolean.valueOf(safeGetJsonValue(event, JSON_PATH.SKIPPABLE));
    }

    public boolean isAutoPlay(String event) {
        return Boolean.valueOf(safeGetJsonValue(event, JSON_PATH.AUTOPLAY));
    }

    public String getPosition(String event) {
        return (safeGetJsonValue(event, JSON_PATH.POSITION));
    }

    public String getSessionID(String event) {
        return getJsonValueIfAny(event, JSON_PATH.SESSION_ID);
    }

    public String getEventType(String event) {
        return safeGetJsonValue(event, JSON_PATH.EVENT_TYPE);
    }

    public int getPercentageInView(String event) {
        return Integer.parseInt(safeGetJsonValue(event, JSON_PATH.VIEWABILITY));
    }

    public String getServiceVersion(String event) {
        return safeGetJsonValue(event, JSON_PATH.SERVICE_VERSION);
    }

    public String getPartnerVersion(String event) {
        return safeGetJsonValue(event, JSON_PATH.PARTNER_VERSION);
    }


    public String getEnvironment(String event) {
        return safeGetJsonValue(event, JSON_PATH.DATA_ENVIRONMENT);
    }

    public String getAdSessionType(String event) {
        return safeGetJsonValue(event, JSON_PATH.AD_SESSION_TYPE);
    }

    public String getClid(String event) {
        return safeGetJsonValue(event, JSON_PATH.SUPPORTS_CLID);
    }

    public String getVlid(String event) {
        return safeGetJsonValue(event, JSON_PATH.SUPPORTS_VLID);
    }

    public String getAppId(String event) {
        return safeGetJsonValue(event, JSON_PATH.APP_ID);
    }

    public String getLibraryVersion(String event) {
        return safeGetJsonValue(event, JSON_PATH.LIBRARY_VERSION);
    }


    public boolean eventContainsReasons(String event, String[] reasons) {
        String eventReasons = getViewabilityErrorReasons(event);
        for (String reason : reasons) {
            if (eventReasons.equals(reason)) {
                return true;
            }
        }
        return false;
    }

    public String getViewabilityErrorReasons(String event) {
        return safeGetJsonValue(event, JSON_PATH.VIEWABILITY_REASONS);
    }

    public String getUserInteraction(String event) {
        return safeGetJsonValue(event, JSON_PATH.INTERACTION_TYPE);
    }

    public Rectangle2D getOnScreenGeometry(String event) {
        String geometry = safeGetJsonValue(event, JSON_PATH.ON_SCREEN_GEOMETRY);
        if (geometry.isEmpty()) {
            return null;
        }

        double width = Double.parseDouble(safeGetJsonValue(geometry, JSON_PATH.WIDTH));
        double height = Double.parseDouble(safeGetJsonValue(geometry, JSON_PATH.HEIGHT));
        double x = Double.parseDouble(safeGetJsonValue(geometry, JSON_PATH.X));
        double y = Double.parseDouble(safeGetJsonValue(geometry, JSON_PATH.Y));

        return new Rectangle2D.Double(x, y, width, height);
    }

    public Rectangle2D getObstructionGeometry(String event) {
        String geometry = safeGetJsonValue(event, JSON_PATH.OBSTRUCTION_GEOMETRY);
        if (geometry.isEmpty()) {
            return null;
        }

        double width = Double.parseDouble(safeGetJsonValue(geometry, JSON_PATH.WIDTH));
        double height = Double.parseDouble(safeGetJsonValue(geometry, JSON_PATH.HEIGHT));
        double x = Double.parseDouble(safeGetJsonValue(geometry, JSON_PATH.X));
        double y = Double.parseDouble(safeGetJsonValue(geometry, JSON_PATH.Y));

        return new Rectangle2D.Double(x, y, width, height);
    }

    public String getMediaType(String event) {
        return safeGetJsonValue(event , JSON_PATH.MEDIA_TYPE);
    }

    public String getDeviceVolume(String event) {
        return safeGetJsonValue(event, JSON_PATH.DEVICE_VOLUME);
    }

    public String getVideoPlayerVolume(String event) {
        return safeGetJsonValue(event, JSON_PATH.PLAYER_VOLUME);
    }

    public String getViewportData(String event){
        String viewportWidth = safeGetJsonValue(event, JSON_PATH.VIEWPORT_WIDTH);
        String viewportHeight = safeGetJsonValue(event, JSON_PATH.VIEWPORT_HEIGHT);
        String viewportX = safeGetJsonValue(event, JSON_PATH.VIEWPORT_X);
        String viewportY = safeGetJsonValue(event, JSON_PATH.VIEWPORT_Y);
        if (viewportWidth.isEmpty() || viewportHeight.isEmpty() || viewportX.isEmpty() || viewportY.isEmpty()) {
            return null;
        }
        return String.format(viewportHeight, viewportWidth, viewportX, viewportY);
    }

    public String getPlayerState(String event){
        return safeGetJsonValue(event, JSON_PATH.PLAYER_STATE);
    }

    // ----------------------------------------------------------------------
    // Private methods
    // ----------------------------------------------------------------------

    /**
     * Extracts value for given path from the event
     * This method expects valid JSON that contains the given path.
     * So if path is absent the method will fail.
     * That means that we trying to check the unexpected event in particular place.
     * @param event - the raw string for OM event received from Har
     * @param path  - the JSON path to the property
     * @return the value for given path
     */
    private String safeGetJsonValue(String event, String path) {
        String res = "";
        try {
            res = Global_for_JSON.getJsonValue(event, path);
        } catch (Throwable exc) {
            fail(String.format("OMSDKEventParser error: can't extract value for path '%s' from event '%s'", path, event));
        }

        return res;
    }

    /**
     * Extracts value for given path from the event
     * @param event - the raw string for OM event received from Har
     * @param path  - the JSON path to the property
     * @return  the value for given path
     *          the empty string if event does not contain the given path
     */
    private String getJsonValueIfAny(String event, String path) {
        String res = "";
        try {
            res = Global_for_JSON.getJsonValue(event, path);
        } catch (Throwable exc) {
            // Expected case - the key is absent in the JSON
        	exc.printStackTrace();
        }

        return res;
    }

}
